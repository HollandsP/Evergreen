name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  # ===== Pre-Release Validation =====
  pre-release-validation:
    name: Pre-Release Validation
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      release_notes: ${{ steps.notes.outputs.release_notes }}
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Release version: ${VERSION}"
    
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if ! [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: v1.0.0 or v1.0.0-beta1"
          exit 1
        fi
    
    - name: Check if version already exists
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if git rev-parse "$VERSION" >/dev/null 2>&1; then
          echo "Version $VERSION already exists!"
          exit 1
        fi
    
    - name: Generate release notes
      id: notes
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Get previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        # Generate release notes
        echo "# Release Notes for ${VERSION}" > release_notes.md
        echo "" >> release_notes.md
        echo "## What's Changed" >> release_notes.md
        echo "" >> release_notes.md
        
        if [ -n "$PREV_TAG" ]; then
          # Get commit messages since last tag
          git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%an)" >> release_notes.md
        else
          echo "Initial release" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Statistics" >> release_notes.md
        echo "" >> release_notes.md
        
        if [ -n "$PREV_TAG" ]; then
          echo "- Commits: $(git rev-list ${PREV_TAG}..HEAD --count)" >> release_notes.md
          echo "- Contributors: $(git log ${PREV_TAG}..HEAD --pretty=format:"%an" | sort -u | wc -l)" >> release_notes.md
          echo "- Files changed: $(git diff --name-only ${PREV_TAG}..HEAD | wc -l)" >> release_notes.md
        fi
        
        # Save release notes
        NOTES=$(cat release_notes.md)
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        echo "$NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  # ===== Run All Tests =====
  test-suite:
    name: Complete Test Suite
    needs: [pre-release-validation]
    uses: ./.github/workflows/ci-cd-pipeline.yml
    secrets: inherit

  # ===== Build Release Artifacts =====
  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [pre-release-validation, test-suite]
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build Python package
      run: |
        python setup.py sdist bdist_wheel
    
    - name: Build standalone executable
      run: |
        pyinstaller --onefile --name evergreen-${{ matrix.platform }} src/main.py
    
    - name: Build frontend
      working-directory: ./web
      run: |
        npm ci
        npm run build
    
    - name: Create release archive
      run: |
        VERSION="${{ needs.pre-release-validation.outputs.version }}"
        ARCHIVE_NAME="evergreen-${VERSION}-${{ matrix.platform }}"
        
        mkdir -p release/${ARCHIVE_NAME}
        
        # Copy built artifacts
        cp -r dist/* release/${ARCHIVE_NAME}/
        cp -r web/build release/${ARCHIVE_NAME}/web
        
        # Copy documentation
        cp README.md LICENSE release/${ARCHIVE_NAME}/
        
        # Create archive
        cd release
        if [[ "${{ matrix.platform }}" == "windows" ]]; then
          7z a ${ARCHIVE_NAME}.zip ${ARCHIVE_NAME}
        else
          tar -czf ${ARCHIVE_NAME}.tar.gz ${ARCHIVE_NAME}
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-${{ matrix.platform }}
        path: release/*

  # ===== Build Docker Images =====
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [pre-release-validation, test-suite]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/evergreen:${{ needs.pre-release-validation.outputs.version }}
          ${{ secrets.DOCKER_USERNAME }}/evergreen:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===== Create GitHub Release =====
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [pre-release-validation, build-artifacts, build-docker]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: release-artifacts
    
    - name: Create Release
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Create release
          const release = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: '${{ needs.pre-release-validation.outputs.version }}',
            name: 'Evergreen ${{ needs.pre-release-validation.outputs.version }}',
            body: `${{ needs.pre-release-validation.outputs.release_notes }}`,
            draft: false,
            prerelease: '${{ needs.pre-release-validation.outputs.version }}'.includes('-')
          });
          
          console.log(`Created release: ${release.data.html_url}`);
          
          // Upload assets
          const artifactDirs = fs.readdirSync('release-artifacts');
          
          for (const dir of artifactDirs) {
            const files = fs.readdirSync(path.join('release-artifacts', dir));
            
            for (const file of files) {
              if (file.endsWith('.zip') || file.endsWith('.tar.gz')) {
                const filePath = path.join('release-artifacts', dir, file);
                const fileContent = fs.readFileSync(filePath);
                
                console.log(`Uploading ${file}...`);
                
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.data.id,
                  name: file,
                  data: fileContent
                });
              }
            }
          }

  # ===== Deploy Documentation =====
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [create-release]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install MkDocs
      run: |
        pip install mkdocs mkdocs-material
    
    - name: Build documentation
      run: |
        mkdocs build
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site

  # ===== Post-Release Tasks =====
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [create-release]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Update version in files
      run: |
        VERSION="${{ needs.pre-release-validation.outputs.version }}"
        VERSION_NUM="${VERSION#v}"  # Remove 'v' prefix
        
        # Update version in setup.py
        sed -i "s/version=\".*\"/version=\"${VERSION_NUM}\"/" setup.py
        
        # Update version in package.json
        cd web
        npm version ${VERSION_NUM} --no-git-tag-version
        
        # Create PR for version updates
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git checkout -b update-version-${VERSION}
        git add -A
        git commit -m "chore: update version to ${VERSION}"
    
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: update-version-${{ needs.pre-release-validation.outputs.version }}
        title: "chore: update version to ${{ needs.pre-release-validation.outputs.version }}"
        body: |
          This PR updates the version numbers in the codebase following the release of ${{ needs.pre-release-validation.outputs.version }}.
          
          Auto-generated by the release workflow.
    
    - name: Send release notification
      uses: actions/github-script@v6
      with:
        script: |
          // Post release announcement
          const version = '${{ needs.pre-release-validation.outputs.version }}';
          const releaseUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${version}`;
          
          console.log(`Release ${version} completed successfully!`);
          console.log(`View release: ${releaseUrl}`);