name: 'Evergreen AI Pipeline CI/CD'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.9'

jobs:
  # Security and Quality Checks
  security-scan:
    name: 'Security & Quality Scan'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        working-directory: ./web
        run: npm ci

      - name: Run ESLint
        working-directory: ./web
        run: npm run lint

  # Frontend Build and Test
  frontend-test:
    name: 'Frontend Build & Test'
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        working-directory: ./web
        run: npm ci

      - name: Type check
        working-directory: ./web
        run: npm run type-check

      - name: Build application
        working-directory: ./web
        run: npm run build

      - name: Run unit tests
        working-directory: ./web
        run: npm run test:unit -- --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./web/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            web/.next
            web/out
          key: ${{ runner.os }}-nextjs-${{ hashFiles('web/package-lock.json') }}-${{ hashFiles('web/**/*.tsx', 'web/**/*.ts') }}

  # Backend Build and Test
  backend-test:
    name: 'Backend Build & Test'
    runs-on: ubuntu-latest
    needs: security-scan
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run Python linting
        run: |
          pip install flake8 black isort
          flake8 src/ api/ workers/
          black --check src/ api/ workers/
          isort --check-only src/ api/ workers/

      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          TESTING: true
        run: |
          pytest tests/ --cov=src --cov=api --cov=workers --cov-report=xml

      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: backend
          name: backend-coverage

  # Integration Tests
  integration-test:
    name: 'Integration Tests'
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd web && npm ci
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build frontend
        working-directory: ./web
        run: npm run build

      - name: Start services
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          TESTING: true
        run: |
          # Start backend API
          uvicorn api.main:app --host 0.0.0.0 --port 8000 &
          
          # Start frontend
          cd web && npm start &
          
          # Wait for services to be ready
          sleep 30

      - name: Run integration tests
        working-directory: ./web
        env:
          API_BASE_URL: http://localhost:8000
          FRONTEND_URL: http://localhost:3000
        run: npm run test:integration

  # E2E Tests with Playwright
  e2e-test:
    name: 'E2E Tests'
    runs-on: ubuntu-latest
    needs: integration-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: ./web
        run: npm ci

      - name: Install Playwright
        working-directory: ./web
        run: npx playwright install --with-deps

      - name: Start Docker services
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 60  # Wait for all services to be ready

      - name: Run E2E tests
        working-directory: ./web
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000
          # Mock API keys for testing (no real charges)
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
          ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY_TEST }}
          RUNWAY_API_KEY: ${{ secrets.RUNWAY_API_KEY_TEST }}
        run: npx playwright test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: web/playwright-report/

      - name: Stop Docker services
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  # Performance Testing
  performance-test:
    name: 'Performance Tests'
    runs-on: ubuntu-latest
    needs: e2e-test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Start services
        run: |
          docker-compose up -d
          sleep 60

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/production
          configPath: ./.lighthouserc.json
          uploadArtifacts: true

      - name: Run load tests
        run: |
          npm install -g artillery
          artillery run performance/load-test.yml

  # Build Docker Images
  build-images:
    name: 'Build Docker Images'
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./web
          file: ./web/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository }}/frontend:${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository }}/backend:${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    needs: [build-images, performance-test]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'staging')
    environment:
      name: staging
      url: https://evergreen-staging.yourdomain.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_STAGING }}
          IMAGE_TAG: ${{ needs.build-images.outputs.image-tag }}
        run: |
          echo "$KUBE_CONFIG" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Update deployment with new image
          kubectl set image deployment/evergreen-frontend frontend=ghcr.io/${{ github.repository }}/frontend:$IMAGE_TAG -n staging
          kubectl set image deployment/evergreen-backend backend=ghcr.io/${{ github.repository }}/backend:$IMAGE_TAG -n staging
          
          # Wait for rollout
          kubectl rollout status deployment/evergreen-frontend -n staging --timeout=600s
          kubectl rollout status deployment/evergreen-backend -n staging --timeout=600s

      - name: Run staging smoke tests
        run: |
          # Basic health check
          curl -f https://evergreen-staging.yourdomain.com/api/health
          curl -f https://evergreen-staging.yourdomain.com

  # Deploy to Production
  deploy-production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [build-images, performance-test]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'production')
    environment:
      name: production
      url: https://evergreen.yourdomain.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
          IMAGE_TAG: ${{ needs.build-images.outputs.image-tag }}
        run: |
          echo "$KUBE_CONFIG" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Blue-green deployment strategy
          kubectl set image deployment/evergreen-frontend-green frontend=ghcr.io/${{ github.repository }}/frontend:$IMAGE_TAG -n production
          kubectl set image deployment/evergreen-backend-green backend=ghcr.io/${{ github.repository }}/backend:$IMAGE_TAG -n production
          
          # Wait for green deployment
          kubectl rollout status deployment/evergreen-frontend-green -n production --timeout=600s
          kubectl rollout status deployment/evergreen-backend-green -n production --timeout=600s
          
          # Switch traffic to green
          kubectl patch service evergreen-frontend -p '{"spec":{"selector":{"version":"green"}}}' -n production
          kubectl patch service evergreen-backend -p '{"spec":{"selector":{"version":"green"}}}' -n production

      - name: Run production smoke tests
        run: |
          # Comprehensive health checks
          curl -f https://evergreen.yourdomain.com/api/health
          curl -f https://evergreen.yourdomain.com/api/status
          curl -f https://evergreen.yourdomain.com

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: 'Evergreen AI Pipeline deployed to production'

  # Cleanup
  cleanup:
    name: 'Cleanup Resources'
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Cleanup old Docker images
        run: |
          # Keep only last 10 images
          docker image prune -f
          
      - name: Cleanup old deployments
        if: success()
        run: |
          echo "Deployment successful, cleaning up old resources"
          # Add cleanup logic for old deployments